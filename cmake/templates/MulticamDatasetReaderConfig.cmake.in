#
#        Cmake configuration file
#
# This file is part of DLR RMC project MulticamDatasetReader
#

#
# This module reads hints about search locations from variables::
#   MulticamDatasetReader_NO_LOAD_DEPENDENCIES - don't load necessary dependencies
#   MulticamDatasetReader_NO_ABS_LIBS          - don't try to determine absolute paths
#                              for libraries
#
#
# and saves search results persistently in CMake cache entries::
#   MulticamDatasetReader_INCLUDE_DIRS         - Directory containing MulticamDatasetReader headers
#   MulticamDatasetReader_LIBRARY_DIRS         - Directory containing MulticamDatasetReader libraries
#   MulticamDatasetReader_LIBRARIES            - MulticamDatasetReader libraries
#
# note, that the MulticamDatasetReader_LIBRARIES contain only the components that are
# specified within the find_package command.
# this config file provides all variables for the package name (MulticamDatasetReader)
# as well as for the capitalized form (MULTICAMDATASETREADER).
#
# Moreover all specified components and dependencies are defined
# as :prop_tgt:`IMPORTED` targets, i.e. as MulticamDatasetReader::${COMPONENT_NAME}
#


cmake_policy(PUSH)
cmake_policy(SET CMP0057 NEW)

#
# package init
#
@PACKAGE_INIT@

set(MulticamDatasetReader_ROOT_DIR "${PACKAGE_PREFIX_DIR}")
set(MULTICAMDATASETREADER_ROOT_DIR "${MulticamDatasetReader_ROOT_DIR}")
set(MulticamDatasetReader_DIR "${MulticamDatasetReader_ROOT_DIR}")
set(MULTICAMDATASETREADER_DIR "${MulticamDatasetReader_ROOT_DIR}")

#
# include directories
#
set_and_check(MulticamDatasetReader_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set(MulticamDatasetReader_INCLUDE_DIRS "${MulticamDatasetReader_INCLUDE_DIR}")
set_and_check(MULTICAMDATASETREADER_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set(MULTICAMDATASETREADER_INCLUDE_DIRS "${MulticamDatasetReader_INCLUDE_DIR}")

#
# library directories
#
set_and_check(MulticamDatasetReader_LIBRARY_DIR "@PACKAGE_LIBRARY_INSTALL_DIR@")
set(MulticamDatasetReader_LIBRARY_DIRS "${MulticamDatasetReader_LIBRARY_DIR}")
set_and_check(MULTICAMDATASETREADER_LIBRARY_DIR "@PACKAGE_LIBRARY_INSTALL_DIR@")
set(MULTICAMDATASETREADER_LIBRARY_DIRS "${MulticamDatasetReader_LIBRARY_DIR}")

#
# dependencies and properties
#
include("${CMAKE_CURRENT_LIST_DIR}/MulticamDatasetReaderTargetProperties.cmake")

#
# helpers
#

macro(MulticamDatasetReader_find_library mdr_lib)
    # clean any occurrence of temp variable
    unset(mdr_abslib CACHE)

    if(IS_ABSOLUTE "${mdr_lib}" OR MulticamDatasetReader_NO_ABS_LIBS)
        set(mdr_abslib "${mdr_lib}")
    else()
        # locate library and set abs path
        find_library(mdr_abslib NAME "${mdr_lib}" PATHS ${MulticamDatasetReader_LIBRARY_DIRS})
        if(NOT mdr_abslib)
            message(FATAL_ERROR "library '${mdr_lib}' can not be located ... corrupted installation?")
        endif()
    endif()
endmacro(MulticamDatasetReader_find_library)

#
# libraries
#
set(MulticamDatasetReader_AVAILABLE_COMPONENTS "@MDR_LIB_TARGETS@")
set(MulticamDatasetReader_NEEDED_COMPONENTS "")

# check request components:
# * are they in the list of available components?
# * do they require other components -> add them
if(MulticamDatasetReader_FIND_COMPONENTS)
    foreach(COMPONENT ${MulticamDatasetReader_FIND_COMPONENTS})
        string(TOUPPER ${COMPONENT} UPPERCOMPONENT)

        if(NOT ${COMPONENT} IN_LIST MulticamDatasetReader_AVAILABLE_COMPONENTS)
                message(FATAL_ERROR "[MulticamDatasetReader] MulticamDatasetReader has no component named '${COMPONENT}'")
        endif()
        list(APPEND MulticamDatasetReader_NEEDED_COMPONENTS ${COMPONENT})
        foreach(DEP_COMPONENT ${MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES})
            if(${DEP_COMPONENT} IN_LIST MulticamDatasetReader_AVAILABLE_COMPONENTS AND NOT ${DEP_COMPONENT} IN_LIST MulticamDatasetReader_NEEDED_COMPONENTS)
                list(APPEND MulticamDatasetReader_NEEDED_COMPONENTS ${DEP_COMPONENT})
            endif()
        endforeach()
    endforeach()
endif()

# setup all requested components:
# * setup component as MulticamDatasetReader::<COMPONENT>
# * assign inc. dir, libraries, dependencies, etc.
# * load external dependencies (find_package)
foreach(COMPONENT ${MulticamDatasetReader_NEEDED_COMPONENTS})
    # helpers
    string(TOUPPER ${COMPONENT} UPPERCOMPONENT)
    list(APPEND MulticamDatasetReader_COMPONENTS ${COMPONENT})

    # set library name and per-component-dirs
    list(APPEND MulticamDatasetReader_LIBS ${COMPONENT})
    set(MulticamDatasetReader_${UPPERCOMPONENT}_INCLUDE_DIRS "${MulticamDatasetReader_INCLUDE_DIRS}")
    set(MulticamDatasetReader_${UPPERCOMPONENT}_LIBRARY_DIRS "${MulticamDatasetReader_LIBRARY_DIRS}")
    set(MulticamDatasetReader_${UPPERCOMPONENT}_LIBS "${COMPONENT}")

    # locate library and set abs path
    MulticamDatasetReader_find_library(${COMPONENT})
    set(MulticamDatasetReader_${UPPERCOMPONENT}_LIBRARY "${mdr_abslib}")

    # define import target and set properties
    add_library(MulticamDatasetReader::${COMPONENT} ${MulticamDatasetReader_${UPPERCOMPONENT}_TYPE} IMPORTED)

    # set include dir
    set_target_properties(MulticamDatasetReader::${COMPONENT} PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${MulticamDatasetReader_INCLUDE_DIRS}"
    )

    # set (lang-specific) library
    set_target_properties(MulticamDatasetReader::${COMPONENT} PROPERTIES
        IMPORTED_LINK_INTERFACE_LANGUAGES "${MulticamDatasetReader_${UPPERCOMPONENT}_LANG}"
        IMPORTED_LOCATION ${MulticamDatasetReader_${UPPERCOMPONENT}_LIBRARY}
    )

    # load external packages (double load is handled in pkg file
    if(NOT MulticamDatasetReader_NO_LOAD_DEPENDENCIES)
        # backup COMPONENT
        set(__MulticamDatasetReader_COMPONENT_BAK ${COMPONENT})

        # load dependecy packages
        foreach(mdr_pkg ${MulticamDatasetReader_${UPPERCOMPONENT}_PACKAGES})

            message(STATUS "[MulticamDatasetReader] loading dependency ${mdr_pkg}")
            include("${CMAKE_CURRENT_LIST_DIR}/MulticamDatasetReader_pkg_${mdr_pkg}.cmake")
        endforeach()

        # restore
        set(COMPONENT ${__MulticamDatasetReader_COMPONENT_BAK})
        string(TOUPPER ${COMPONENT} UPPERCOMPONENT)
    endif()

    # dependencies
    foreach(mdr_dep_lib ${MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES})
        string(FIND ${mdr_dep_lib} "::" mdr_is_prop)
        if(${mdr_is_prop} EQUAL -1)
            # find absolute path of library
            MulticamDatasetReader_find_library(${mdr_dep_lib})
            list(APPEND MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES_ABS "${mdr_abslib}")
        else()
            # we have a property (<pkg>::<comp>) kind of dependency
            # -> pass through
            list(APPEND MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES_ABS "${mdr_dep_lib}")
        endif()
    endforeach()

    set_target_properties(MulticamDatasetReader::${COMPONENT} PROPERTIES
        INTERFACE_LINK_LIBRARIES "${MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES_ABS}"
    )

    # see https://cmake.org/cmake/help/v3.10/prop_gbl/CMAKE_CMDR_KNOWN_FEATURES.html#prop_gbl:CMAKE_CMDR_KNOWN_FEATURES
    #set_target_properties(MulticamDatasetReader::${COMPONENT} PROPERTIES
    #    INTERFACE_COMPILE_FEATURES "${MulticamDatasetReader_${UPPERCOMPONENT}_COMPILE_FEATURES}"
    #)

    #
    # add requested components to old interface
    #
    list(APPEND MulticamDatasetReader_LIBRARIES "${MulticamDatasetReader_${UPPERCOMPONENT}_LIBRARY}")
    list(APPEND MulticamDatasetReader_LIBRARIES "${MulticamDatasetReader_${UPPERCOMPONENT}_DEPENDENCIES_ABS}")

endforeach()

# cleanup temp variable
unset(mdr_abslib CACHE)

#
# end of cmake config
#
message(STATUS "[MulticamDatasetReader] * version   : ${MulticamDatasetReader_VERSION}")
message(STATUS "[MulticamDatasetReader] * root dir  : ${MulticamDatasetReader_DIR}")
message(STATUS "[MulticamDatasetReader] * components: ${MulticamDatasetReader_COMPONENTS}")
message(STATUS "[MulticamDatasetReader] * inc. dir  : ${MulticamDatasetReader_INCLUDE_DIRS}")
message(STATUS "[MulticamDatasetReader] * lib. dir  : ${MulticamDatasetReader_LIBRARY_DIRS}")
message(STATUS "[MulticamDatasetReader] * libraries : ${MulticamDatasetReader_LIBRARIES}")

cmake_policy(POP)
